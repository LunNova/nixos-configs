diff --git a/dlls/ntdll/unix/process.c b/dlls/ntdll/unix/process.c
index 503ef93d966..1e5a517ba92 100644
--- a/dlls/ntdll/unix/process.c
+++ b/dlls/ntdll/unix/process.c
@@ -1257,8 +1257,8 @@ NTSTATUS WINAPI NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class
         break;
 
     case ProcessDebugPort:
-        len = sizeof(DWORD_PTR);
-        if (size == len)
+        len = sizeof(DWORD);
+        if (size >= len)
         {
             if (!info) ret = STATUS_ACCESS_VIOLATION;
             else
@@ -1274,12 +1274,12 @@ NTSTATUS WINAPI NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class
                 SERVER_END_REQ;
                 if (ret == STATUS_SUCCESS)
                 {
-                    *(DWORD_PTR *)info = ~0ul;
+                    *(DWORD *)info = ~0ul;
                     NtClose( debug );
                 }
                 else if (ret == STATUS_PORT_NOT_SET)
                 {
-                    *(DWORD_PTR *)info = 0;
+                    *(DWORD *)info = 0;
                     ret = STATUS_SUCCESS;
                 }
             }
diff --git a/dlls/ntdll/unix/registry.c b/dlls/ntdll/unix/registry.c
index 797e32a5bf1..f258e28e730 100644
--- a/dlls/ntdll/unix/registry.c
+++ b/dlls/ntdll/unix/registry.c
@@ -156,6 +162,7 @@ NTSTATUS WINAPI NtOpenKeyEx( HANDLE *key, ACCESS_MASK access, const OBJECT_ATTRI
         *key = wine_server_ptr_handle( reply->hkey );
     }
     SERVER_END_REQ;
+    TRACE("<- ret %d\n", ret);
     TRACE("<- %p\n", *key);
     return ret;
 }
diff --git a/dlls/winevulkan/loader.c b/dlls/winevulkan/loader.c
index cddcd0360ac..cd0b6e7f100 100644
--- a/dlls/winevulkan/loader.c
+++ b/dlls/winevulkan/loader.c
@@ -157,6 +157,8 @@ PFN_vkVoidFunction WINAPI vkGetDeviceProcAddr(VkDevice device, const char *name)
     if (!device || !name)
         return NULL;
 
+    ERR("calling vkGetDeviceProcAddr for %s\n", debugstr_a(name));
+
     /* Per the spec, we are only supposed to return device functions as in functions
      * for which the first parameter is vkDevice or a child of vkDevice like a
      * vkCommandBuffer or vkQueue.
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 4f949d0b42d..19ec8f591b0 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -674,6 +674,8 @@ VkResult wine_vkCreateDevice(VkPhysicalDevice phys_dev_handle, const VkDeviceCre
     unsigned int i;
     VkResult res;
 
+    ERR("Calling wine_vkCreateDevice\n");
+
     if (allocator)
         FIXME("Support for allocation callbacks not implemented yet\n");
 
diff --git a/dlls/winex11.drv/vulkan.c b/dlls/winex11.drv/vulkan.c
index 101504a7887..f60bc90ee88 100644
--- a/dlls/winex11.drv/vulkan.c
+++ b/dlls/winex11.drv/vulkan.c
@@ -482,7 +482,7 @@ static void *X11DRV_vkGetDeviceProcAddr(VkDevice device, const char *name)
 {
     void *proc_addr;
 
-    TRACE("%p, %s\n", device, debugstr_a(name));
+    ERR("X11DRV_vkGetDeviceProcAddr %p, %s\n", device, debugstr_a(name));
 
     if (!pvkGetDeviceProcAddr(device, wine_vk_native_fn_name(name)))
         return NULL;
@@ -497,7 +497,7 @@ static void *X11DRV_vkGetInstanceProcAddr(VkInstance instance, const char *name)
 {
     void *proc_addr;
 
-    TRACE("%p, %s\n", instance, debugstr_a(name));
+    ERR("X11DRV_vkGetInstanceProcAddr %p, %s\n", instance, debugstr_a(name));
 
     if (!pvkGetInstanceProcAddr(instance, wine_vk_native_fn_name(name)))
         return NULL;
diff --git a/dlls/wow64/syscall.c b/dlls/wow64/syscall.c
index 86c5b61157e..9244dce3f4a 100644
--- a/dlls/wow64/syscall.c
+++ b/dlls/wow64/syscall.c
@@ -456,6 +456,7 @@ static void init_syscall_table( HMODULE module, ULONG idx, const SYSTEM_SERVICE_
                 {
                     thunks[start_pos + table_pos] = (syscall_thunk)orig_table->ServiceTable[wrap_pos++];
                     max_pos = max( table_pos, max_pos );
+                    FIXME( "!!! assigned syscall id %04lx for %s\n", id, name );
                 }
                 else ERR( "invalid syscall id %04lx for %s\n", id, name );
             }
